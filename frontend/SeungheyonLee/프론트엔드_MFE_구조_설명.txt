
🧠 우리가 하는 일:
"두 개의 웹앱을 연결해서, 마치 하나의 앱처럼 동작하게 만들기"

📦 폴더 구조
frontend/
├── html-container          ← 메인 앱 (컨트롤 타워)
└── html-css-test-app       ← 기능을 가진 작은 앱

📌 html-container란?
→ 전체를 조작하고 연결하는 중심 앱 (리모컨 역할)
- 다른 앱을 불러옴
- 페이지 라우팅 처리
- 메인 앱 역할 수행

📌 html-css-test-app란?
→ 기능이 담긴 독립 앱
- HTML/CSS 연습 화면을 가짐
- 독립 실행도 가능
- 메인 앱에서 가져다 사용도 가능

🔧 기술 스택 설명 (초보자 기준)
- React: 사용자 화면을 구성하는 프레임워크
- TypeScript: 안전하게 코드를 작성하게 해주는 언어
- Rspack: 코드를 실행 가능한 형태로 묶어주는 도구
- Material UI: 버튼 등 UI 구성요소를 쉽게 사용할 수 있게 해줌
- React Router: 페이지를 나눌 수 있게 해줌
- Module Federation: 다른 앱의 컴포넌트를 불러다 쓸 수 있게 함

🎯 전체 동작 흐름
1. html-css-test-app이 자신의 기능(App)을 외부에 노출(remoteEntry.js 생성)
2. html-container가 그 기능을 import("htmlCssTestApp/App")로 불러옴
3. React Router로 /html-css-test 주소에 그 컴포넌트를 연결함
4. 브라우저에서 접속하면 하나의 앱처럼 동작함

🧪 실행 방법
1. 각 폴더에서 npm install
2. html-css-test-app 먼저 npm run start (포트 3001)
3. html-container 다음 npm run start (포트 3000)
4. 브라우저에서 확인:
   - http://localhost:3000/
   - http://localhost:3000/html-css-test

💡 핵심 요약
- 기능마다 앱을 나누고 독립 개발 가능
- 메인 앱에서 작은 앱을 불러와서 하나의 앱처럼 사용
- 실무에서 사용하는 마이크로 프론트엔드 구조
